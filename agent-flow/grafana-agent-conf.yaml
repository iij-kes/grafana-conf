apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-agent
  namespace: monitoring
data:
  config.river: |
    // Write your Agent config here:
    logging {
      level = "debug"
      format = "logfmt"
    }
    prometheus.remote_write "mimir" {
        endpoint {
            url = "http://192.168.65.3:8080/api/v1/push"

            headers = {
              "X-Scope-OrgID" = "keisuk-t",
            }
        }
    }
    prometheus.operator.servicemonitors "mimir" {
        forward_to = [ prometheus.remote_write.mimir.receiver ]
    }
    prometheus.operator.podmonitors "mimir" {
        forward_to = [ prometheus.remote_write.mimir.receiver ]
    }
    prometheus.operator.probes "mimir" {
        forward_to = [ prometheus.remote_write.mimir.receiver ]
    }
    mimir.rules.kubernetes "mimir" {
        address = "http://192.168.65.3:8080/"
        prometheus_http_prefix = "/prometheus"
        tenant_id = "keisuk-t"
    }
    otelcol.receiver.otlp "default" {
        http {
          include_metadata = true
        }
        grpc {
          include_metadata = true
        }
        output {
          metrics = [otelcol.processor.k8sattributes.default.input]
          logs    = [otelcol.processor.k8sattributes.default.input]
          traces  = [otelcol.processor.k8sattributes.default.input]
        }
    }
    otelcol.processor.k8sattributes "default" {
        extract {
          metadata = [ "k8s.namespace.name", "k8s.pod.name", "k8s.pod.start_time",]
        }
        output {
          metrics = [otelcol.processor.batch.default.input]
          logs    = [otelcol.processor.batch.default.input]
          traces  = [otelcol.processor.batch.default.input]
        }
    }
    otelcol.processor.batch "default" {
        output {
          metrics = [otelcol.exporter.otlp.default.input]
          logs    = [otelcol.exporter.otlp.default.input]
          traces  = [otelcol.exporter.otlp.default.input]
        }
    }
    otelcol.exporter.otlp "default" {
        client {
          endpoint = "192.168.65.3:14317"
          auth = otelcol.auth.headers.creds.handler
          tls {
            insecure             = true
            insecure_skip_verify = true
          }         
        }
    }
    otelcol.auth.headers "creds" {
      header {
        key   = "X-Scope-OrgID"
        value = "keisuk-t"
      }
    }
